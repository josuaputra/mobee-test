name: Staging Deployment
on:
  push:
    branches:
      - master
jobs:
  build:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Authenticate to AWS EKS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Update to your AWS region
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name pismo-uat-cluster --region ap-south-1
      - name: Install Kustomize
        run: |
          curl -s "https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest" \
          | grep "browser_download_url.*linux_amd64" \
          | cut -d '"' -f 4 \
          | xargs curl -O
          tar -zxvf kustomize_v*linux_amd64.tar.gz
          chmod +x ./kustomize
          sudo mv ./kustomize /usr/local/bin/kustomize
      - name: Build and push Docker image
        run: |
          IMAGE_TAG=latest
          echo "Building Docker image..."
          docker build -t ${{ secrets.ECR_REPOSITORY_URL }}:${IMAGE_TAG} .
          echo "Logging into ECR..."
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}
          echo "Pushing Docker image..."
          docker push ${{ secrets.ECR_REPOSITORY_URL }}:${IMAGE_TAG}
      - name: Deploy to EKS
        run: |
          # If using kustomize:
          kustomize build ./k8s | kubectl apply -f -